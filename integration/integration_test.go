package integration_test

import (
	"context"
	"fmt"
	"testing"

	"github.com/allinbits/emeris-rpcwatcher/integration"
	"github.com/cosmos/cosmos-sdk/client/flags"
	clitestutil "github.com/cosmos/cosmos-sdk/testutil/cli"
	"github.com/cosmos/cosmos-sdk/testutil/network"
	sdk "github.com/cosmos/cosmos-sdk/types"
	clienttypes "github.com/cosmos/cosmos-sdk/x/ibc/core/02-client/types"
	ibctmcli "github.com/cosmos/cosmos-sdk/x/ibc/light-clients/07-tendermint/client/cli"
	ibctmtypes "github.com/cosmos/cosmos-sdk/x/ibc/light-clients/07-tendermint/types"
	"github.com/stretchr/testify/suite"
	tmproto "github.com/tendermint/tendermint/proto/tendermint/types"
	tmtypes "github.com/tendermint/tendermint/types"
)

type IntegrationTestSuite struct {
	suite.Suite

	cfg      network.Config
	network1 *network.Network
	network2 *network.Network
}

func (s *IntegrationTestSuite) SetupSuite() {
	s.T().Log("setting up integration test suite")

	s.cfg = integration.DefaultConfig()

	s.network1 = network.New(s.T(), s.cfg)
	// s.network2 = network.New(s.T(), s.cfg)

	_, err := s.network1.WaitForHeight(1)
	s.Require().NoError(err)

	// _, err = s.network2.WaitForHeight(1)
	// s.Require().NoError(err)
}

func (s *IntegrationTestSuite) TearDownSuite() {
	s.T().Log("tearing down integration test suite")
	s.network1.Cleanup()
	// s.network2.Cleanup()
}

func (s *IntegrationTestSuite) TestClientConnection() {
	chain1Val := s.network1.Validators[0]
	// chain2Val := s.network2.Validators[0]

	// Write consensus json to temp file, used for an IBC message.
	// Generated by printing the result of cdc.MarshalIntefaceJSON on
	// a tendermint consensus state
	// consensusJSON := testutil.WriteToNewTempFile(
	// 	s.T(),
	// 	`{"@type":"/ibc.lightclients.tendermint.v1.ConsensusState","timestamp":"2021-03-23T18:09:44.553150022Z","root":{"hash":"Zt9Tdes1goGyWAoG2dyae37AVxYtlRgUakp0PnITink="},"next_validators_hash":"59426C7BB30267FB3D1D891776155C0928FC35600C9E1B1EB668387405C4F5A4"}`,
	// )

	// counterpartyPrefix := testutil.WriteToNewTempFile(
	// 	s.T(),
	// 	`{"key_prefix": "aWJj"}`,
	// )

	height, err := s.network1.LatestHeight()
	s.Require().NoError(err)

	blockResult, err := chain1Val.ClientCtx.Client.Block(context.Background(), &height)
	s.Require().NoError(err)

	perPage := 100
	page := 1

	validatorsResult, err := chain1Val.RPCClient.Validators(context.Background(), &height, &page, &perPage)
	s.Require().NoError(err)

	valSet, err := tmtypes.NewValidatorSet(validatorsResult.Validators).ToProto()
	s.Require().NoError(err)

	header := &ibctmtypes.Header{
		SignedHeader: &tmproto.SignedHeader{
			Header: blockResult.Block.Header.ToProto(),
			Commit: blockResult.Block.LastCommit.ToProto(),
		},
		ValidatorSet:      valSet,
		TrustedValidators: valSet,
		TrustedHeight: clienttypes.Height{
			RevisionNumber: 1,
			RevisionHeight: uint64(height),
		},
	}

	data, err := chain1Val.ClientCtx.JSONMarshaler.MarshalJSON(header)
	s.Require().NoError(err)

	s.T().Log("Header...", string(data))

	args := []string{
		string(data),
		"1209600s",
		"1814400s",
		"600s",
		fmt.Sprintf("--%s=%s", flags.FlagFrom, chain1Val.Address.String()),
		fmt.Sprintf("--%s=true", flags.FlagSkipConfirmation),
		fmt.Sprintf("--%s=%s", flags.FlagBroadcastMode, flags.BroadcastBlock),
		fmt.Sprintf("--%s=%s", flags.FlagFees, sdk.NewCoins(sdk.NewCoin(s.cfg.BondDenom, sdk.NewInt(10))).String()),
	}

	cmd := ibctmcli.NewCreateClientCmd()
	clientCtx := chain1Val.ClientCtx
	out, err := clitestutil.ExecTestCLICmd(clientCtx, cmd, args)
	s.Require().NoError(err)
	s.T().Log("Out...", out)
	var txRes sdk.TxResponse
	s.Require().NoError(chain1Val.ClientCtx.JSONMarshaler.UnmarshalJSON(out.Bytes(), &txRes))
	s.Require().Equal(0, txRes.Code)
	s.T().Log(txRes.TxHash)
	s.Require().NoError(s.network1.WaitForNextBlock())
	s.Require().True(false)
}

func TestIntegrationTestSuite(t *testing.T) {
	suite.Run(t, new(IntegrationTestSuite))
}
